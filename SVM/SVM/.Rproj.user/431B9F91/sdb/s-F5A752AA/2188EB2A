{
    "contents" : "#calculate the error E at index k\ngetErr<-function(svm.obj, k){\n\n  y.a.x<- svm.obj$y*svm.obj$alpha*(svm.obj$x)\n  x.k<- as.matrix(svm.obj$x[k,], ncol=1)\n  z<- as.matrix(y.a.x) %*% x.k\n  \n  #??check paper for this formula\n  pred<- sum(z)-svm.obj$b\n  #pred<- sum(z)\n  \n  err<- (pred - svm.obj$y[k])\n  return(err)\n}\n\ngetW<-function(svm.obj){  \n  z<- svm.obj$y*svm.obj$alpha*(svm.obj$x)\n  w<-colSums(z)\n  return(w)\n}\n\nselectIndex<-function(i, err.i, svm.obj){\n  C<-svm.obj$C\n  non.zero.index<-which((svm.obj$alpha != 0) && (svm.obj$alpha < C))\n  \n  max.index<-(-1)\n  maxE<-0\n  if(length(non.zero.index) >0){\n    for(k in non.zero.index){\n      if(k == i){\n        next\n      }\n      err = abs(getErr(svm.obj, k)-err.i)\n      if(err>maxE){\n        maxE<-err\n        max.index<-k\n      }\n    }#end for  \n  }\n   \n  if(max.index < 0){\n    max.index<-randSelectIndex(i, svm.obj$m)\n  }\n  \n  return(max.index)\n}\n\nupdateIndex<-function(svm.obj, index){\n  \n  err<-getErr(svm.obj, index)\n  label<-svm.obj$y[index]\n  if( ((err*label) < (-1)*svm.obj$tolerance && (svm.obj$alpha[index] < svm.obj$C) \n      ) || ((err*label) > svm.obj$tolerance && (svm.obj$alpha[index] >0) )){\n    \n    #select 2nd index \n    #TODO: repace by selectIndex later\n    index2<-randSelectIndex(index, svm.obj$m)\n    label2<-svm.obj$y[index2]\n    err2<-getErr(svm.obj, index2)\n    s<-(lable * label2)\n    \n    #old alpha\n    alpha<-svm.obj$alpha[index]\n    alpha2<-svm.obj$alpha[index2]\n    \n    #upper & lower bound for new aplha2\n    if(label != label2){\n      high = min(svm.obj$C, svm.obj$C + alpha2 - alpha )\n      low = max(0 , alpha2 - alpha)\n    }else{\n      high = min(svm.obj$C, alpha2 + alpha )\n      low = max(0 , alpha2 + alpha - svm.obj$C)  \n    }\n    \n    #make sure low != high\n    if(low == high){\n      return;\n    }\n    \n    #get eta\n    x<-svm.obj$x[index,]\n    x2<-svm.obj$x[index2,]\n    eta = sum(x*x) + sum(x2*x2) - 2*sum(x*x2)  \n  \n    #make sure eta > 0\n    if(eta < 0){\n      print(\"eta > 0\")\n      return;\n    }\n    \n    #update alpha2\n    new.alpha2 <- alpha2 + (label2*(err-err2)/eta)\n    new.alpha2 <- getAlpha(new.alpha2, high, low)\n    svm.obj$alpha[index2]<-new.alpha2\n    \n    #update err in svm.obj\n    \n    #check update value\n    if( abs(new.alpha2 - alpha2) < 1e-5){\n      #alpha2 change too small\n      return(0);\n    }\n    \n    #update alpha\n    new.alpha<- s*(alpha2 - new.alpha2)\n    svm.obj$alpha[index]<-new.alpha\n    \n    \n  }\n  \n}\n\nrandSelectIndex<-function(i, m){\n  j=i\n  while(T){\n    j= sample(m,1)\n    \n    if(j!=i) break\n  }\n  return(j)\n}\n\ngetAlpha<-function(current, high, low){\n  \n  if(current > high){\n    current = high\n  }\n  else if(current < low){\n    current = low\n  }\n  \n  return(current)\n}\n\nupdate.b<-function(b1, b2, alpha, alpha2, C){\n  \n  if(alpha>0 && alpha <C){\n    b<-b1\n  }\n  else if(alpha2>0 && alpha2<C){\n    b<-b2\n  }\n  else{\n    b<-0.5*(b1 + b2)\n  }\n  return(b)\n}  \n\npredict.SVM<-function(svm.obj, data){\n  \n  data.matrix<-as.matrix(data) \n  w<-svm.model$w\n  pred<-(data.matrix %*% w) - svm.model$b\n  pos.index<-which(pred>0)\n  \n  result<-rep(-1, dim(data)[1])\n  result[pos.index]<-1\n  #table(test.Y, pred.test)\n\n  return(result)\n}",
    "created" : 1349578514622.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "4196730521",
    "id" : "2188EB2A",
    "lastKnownWriteTime" : 1349746317,
    "path" : "~/GitHub/MachineLearning/SVM/SVM/SVM_func.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "source_on_save" : true,
    "type" : "r_source"
}