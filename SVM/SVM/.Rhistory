pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y)
pred.train[pos.index]<-1
table(train.Y, pred.train)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
sum(train.Y>0)
sum(train.Y<0)
sum(pred.train<0)
sum(pred.train>0)
e<-(tt %*% w) #+ svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
e<-(tt %*% w)- svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 -err.rate
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test result
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w) + svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
#test result
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w) + svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
c<-(dd %*% w) - svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1)
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
svm.model$b
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)#-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
svm.model<-SVM(train.X, train.Y, 0.1,500)
svm.model<-SVM(train.X, train.Y, 0.1,500)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)#-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test result
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w) - svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w) - svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
svm.model$b
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1,500)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1,500)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
C=1
alpha =0.5
(alpha >0 && alpha<C)
(alpha >0 & alpha<C)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
b1=0.5
if(alpha>0 && alpha <C){
b<-b1
}
b
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
svm.model$b
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)#-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
w
e<-(tt %*% w)
max(e)
min(e)
mean(e)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
svm.model<-SVM(train.X, train.Y, 0.1,500)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
#train result
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)-svm.model$b
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test result
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w) - svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
svm.model$b
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
tt<-as.matrix(train.X)
w<-svm.model$w
e<-(tt %*% w)
pos.index<-which(e>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
dd<-as.matrix(test.X)
w<-svm.model$w
c<-(dd %*% w)
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
train.matrix<-as.matrix(train.X)
w<-svm.model$w
pred<-(train.matrix %*% w)-svm.model$b
pos.index<-which(pred>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test result
test.matrix<-as.matrix(test.X)
w<-svm.model$w
pred<-(test.matrix %*% w) - svm.model$b
pos.index<-which(c>0)
pred.test<-rep(-1, length(test.Y))
pred.test[pos.index]<-1
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
predict.SVM<-function(svm.obj, test){
test.matrix<-as.matrix(test.X)
w<-svm.model$w
pred<-(test.matrix %*% w) - svm.model$b
pos.index<-which(c>0)
result<-rep(-1, dim(test.X)[1])
result[pos.index]<-1
#table(test.Y, pred.test)
return(result)
}
aa<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
#train result
train.matrix<-as.matrix(train.X)
w<-svm.model$w
pred<-(train.matrix %*% w)-svm.model$b
pos.index<-which(pred>0)
pred.train<-rep(-1, length(train.Y))
pred.train[pos.index]<-1
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
pred.train<-predict(svm.model, train.X)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
predict.SVM<-function(svm.obj, test){
test.matrix<-as.matrix(test)
w<-svm.model$w
pred<-(test.matrix %*% w) - svm.model$b
pos.index<-which(c>0)
result<-rep(-1, dim(test.X)[1])
result[pos.index]<-1
#table(test.Y, pred.test)
return(result)
}
pred.train<-predict(svm.model, train.X)
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
predict.SVM<-function(svm.obj, data){
data.matrix<-as.matrix(data)
w<-svm.model$w
pred<-(data.matrix %*% w) - svm.model$b
pos.index<-which(pred>0)
result<-rep(-1, dim(data)[1])
result[pos.index]<-1
#table(test.Y, pred.test)
return(result)
}
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source("SVM.R")
#load library & data
library(kernlab)
data(spam)
#number of samples
m=dim(spam)[1];
# number of features
n=dim(spam)[2];
Y=rep(0,m)
# let spam=1, nonspam=(-1), in SVM the label has to be +1 or -1
Y[ which( spam$type == 'spam')] = 1
Y[ which( spam$type != 'spam')] = (-1)
X = spam[,1:(n-1)]
indices = 1:m
train.indices = sample(m, as.integer(m/2))
test.indices = indices[!indices %in% train.indices]
train.X = X[train.indices,]
test.X = X[test.indices,]
train.Y = Y[train.indices]
test.Y = Y[test.indices]
svm.model<-SVM(train.X, train.Y, 0.1,500)
#normalize training data
train.X = scale(train.X);
train.mu = attr(train.X, "scaled:center");
train.var = attr(train.X, "scaled:scale");
#apply normalized data to test data
test.X = scale(test.X, center=train.mu, scale=train.var);
svm.model<-SVM(train.X, train.Y, 0.1,500)
#remove all previous data
rm(list=ls())
#load data & function
data(iris)
#select only the first two Species from data
data = iris[iris$Species==c('setosa') | iris$Species==c('versicolor') , ]
#define class y=+1,-1
data$y=0;
data[data$Species==c('setosa'),]$y = -1
data[data$Species==c('versicolor'),]$y=1
#ignore old Species term
data = data[, -5]
#set label to x1,x2,x3,x4
names(data)<-c('x1','x2','x3','x4','y')
#number of samples
m=dim(data)[1];
# number of features
n=dim(data)[2];
X = data[,1:(n-1)]
Y = data$y
#get random sample
indices = 1:m
train.indices = sample(m, as.integer(m/2))
test.indices = indices[!indices %in% train.indices]
train.X = X[train.indices,]
test.X = X[test.indices,]
train.Y = Y[train.indices]
test.Y = Y[test.indices]
#run SVM
svm.model<-SVM(train.X, train.Y, 0.1,500)
source("SVM.R")
svm.model<-SVM(train.X, train.Y, 0.1,500)
#normalize training data
train.X = scale(train.X);
train.mu = attr(train.X, "scaled:center");
train.var = attr(train.X, "scaled:scale");
#apply normalized data to test data
test.X = scale(test.X, center=train.mu, scale=train.var);
svm.model<-SVM(train.X, train.Y, 0.1,500)
#train error
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test error
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
svm.model<-SVM(train.X, train.Y, 1,500)
#train error
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test error
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
#run SVM
svm.model<-SVM(train.X, train.Y, 1,500)
#train error
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test error
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
svm.model$b
svm.model$w
train.X[1,]
train.Y[1]
train.Y[100]
train.Y[99]
train.Y[50]
max(train.Y)
sum(train.Y)
sum(train.Y>0)
sum(train.Y<0)
sum(test.Y<0)
sum(test.Y>0)
#remove all previous data
rm(list=ls())
source("SVM.R")
#load library & data
library(kernlab)
data(spam)
#number of samples
m=dim(spam)[1];
# number of features
n=dim(spam)[2];
Y=rep(0,m)
# let spam=1, nonspam=(-1), in SVM the label has to be +1 or -1
Y[ which( spam$type == 'spam')] = 1
Y[ which( spam$type != 'spam')] = (-1)
#separate data X and Y
X = spam[,1:(n-1)]
#get random sample
indices = 1:m
train.indices = sample(m, as.integer(m/2))
test.indices = indices[!indices %in% train.indices]
train.X = X[train.indices,]
test.X = X[test.indices,]
train.Y = Y[train.indices]
test.Y = Y[test.indices]
#normalize training data
train.X = scale(train.X);
train.mu = attr(train.X, "scaled:center");
train.var = attr(train.X, "scaled:scale");
#apply normalized data to test data
test.X = scale(test.X, center=train.mu, scale=train.var);
svm.model<-SVM(train.X, train.Y, 0.1,500)
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
source('~/GitHub/MachineLearning/SVM/SVM/SVM.R')
#train error
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test error
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
source('~/GitHub/MachineLearning/SVM/SVM/SVM_func.R')
svm.model<-SVM(train.X, train.Y, 0.1,1000)
setwd("~/GitHub/MachineLearning/SVM/SVM")
#train error
pred.train<-predict(svm.model, train.X)
table(train.Y, pred.train)
train.err.rate<- sum(pred.train != train.Y)/length(pred.train)
train.accurate.rate <- 1 - train.err.rate
#test error
pred.test<-predict(svm.model, test.X)
table(test.Y, pred.test)
test.err.rate<- sum(pred.test != test.Y)/length(pred.test)
test.accurate.rate <- 1 -test.err.rate
